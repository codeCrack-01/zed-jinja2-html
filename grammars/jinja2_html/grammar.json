{
  "name": "Jinja2 HTML",
  "scopeName": "text.html.jinja2",
  "fileTypes": ["j2", "jinja", "jinja2", "html.j2", "htm.j2", "html.jinja", "htm.jinja", "html.jinja2", "htm.jinja2"],
  "patterns": [
    {
      "include": "#jinja-expression"
    },
    {
      "include": "#jinja-statement"
    },
    {
      "include": "#jinja-comment"
    },
    {
      "include": "text.html.basic"
    }
  ],
  "repository": {
    "jinja-expression": {
      "name": "meta.expression.jinja2",
      "begin": "\\{\\{",
      "end": "\\}\\}",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.expression.begin.jinja2"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.expression.end.jinja2"
        }
      },
      "patterns": [
        {
          "include": "#jinja-expression-content"
        }
      ]
    },
    "jinja-statement": {
      "name": "meta.statement.jinja2",
      "begin": "\\{%",
      "end": "%\\}",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.statement.begin.jinja2"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.statement.end.jinja2"
        }
      },
      "patterns": [
        {
          "include": "#jinja-statement-content"
        }
      ]
    },
    "jinja-comment": {
      "name": "comment.block.jinja2",
      "begin": "\\{#",
      "end": "#\\}",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.begin.jinja2"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.comment.end.jinja2"
        }
      }
    },
    "jinja-expression-content": {
      "patterns": [
        {
          "include": "#jinja-filters"
        },
        {
          "include": "#jinja-functions"
        },
        {
          "include": "#jinja-variables"
        },
        {
          "include": "#jinja-operators"
        },
        {
          "include": "#jinja-literals"
        }
      ]
    },
    "jinja-statement-content": {
      "patterns": [
        {
          "include": "#jinja-keywords"
        },
        {
          "include": "#jinja-control-structures"
        },
        {
          "include": "#jinja-variables"
        },
        {
          "include": "#jinja-operators"
        },
        {
          "include": "#jinja-literals"
        }
      ]
    },
    "jinja-keywords": {
      "patterns": [
        {
          "name": "keyword.control.jinja2",
          "match": "\\b(if|elif|else|endif|for|endfor|while|endwhile|break|continue|block|endblock|extends|include|import|from|macro|endmacro|call|endcall|set|with|endwith|without|context|ignore|missing|filter|endfilter|raw|endraw|autoescape|endautoescape|trans|endtrans|pluralize|do)\\b"
        },
        {
          "name": "keyword.operator.logical.jinja2",
          "match": "\\b(and|or|not|is|in|as)\\b"
        }
      ]
    },
    "jinja-control-structures": {
      "patterns": [
        {
          "name": "meta.control.for.jinja2",
          "begin": "\\b(for)\\b",
          "end": "\\b(in)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.for.jinja2"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.in.jinja2"
            }
          },
          "patterns": [
            {
              "include": "#jinja-variables"
            }
          ]
        },
        {
          "name": "meta.control.if.jinja2",
          "begin": "\\b(if|elif)\\b",
          "end": "(?=%\\})",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.conditional.jinja2"
            }
          },
          "patterns": [
            {
              "include": "#jinja-expression-content"
            }
          ]
        }
      ]
    },
    "jinja-filters": {
      "patterns": [
        {
          "name": "keyword.operator.filter.jinja2",
          "match": "\\|"
        },
        {
          "name": "support.function.filter.jinja2",
          "match": "\\b(abs|attr|batch|capitalize|center|default|d|dictsort|escape|e|filesizeformat|first|float|forceescape|format|groupby|indent|int|join|last|length|count|list|lower|map|max|min|pprint|random|reject|rejectattr|replace|reverse|round|safe|s|select|selectattr|slice|sort|string|striptags|sum|title|trim|truncate|unique|upper|urlencode|urlize|wordcount|wordwrap|xmlattr|tojson|tojsonfilter)\\b"
        }
      ]
    },
    "jinja-functions": {
      "name": "support.function.builtin.jinja2",
      "match": "\\b(range|lipsum|dict|cycler|joiner|namespace)\\b"
    },
    "jinja-variables": {
      "patterns": [
        {
          "name": "variable.other.jinja2",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "variable.other.property.jinja2",
          "match": "\\.[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "jinja-operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.jinja2",
          "match": "(==|!=|<|>|<=|>=)"
        },
        {
          "name": "keyword.operator.arithmetic.jinja2",
          "match": "(\\+|\\-|\\*|/|//|%|\\*\\*)"
        },
        {
          "name": "keyword.operator.assignment.jinja2",
          "match": "="
        }
      ]
    },
    "jinja-literals": {
      "patterns": [
        {
          "name": "string.quoted.double.jinja2",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.jinja2",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.jinja2",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.jinja2",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "constant.numeric.jinja2",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        },
        {
          "name": "constant.language.boolean.jinja2",
          "match": "\\b(true|false|True|False|none|None)\\b"
        }
      ]
    }
  }
}